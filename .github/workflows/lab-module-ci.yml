name: 'M√≥dulo III - Laboratorios M√≥viles CI/CD'

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'server/routes/lab.js'
      - 'server/database/lab-*.sql'
      - 'server/utils/lab-*.js'
      - 'server/scripts/load-lab-seed-data.js'
      - 'server/__tests__/lab.test.js'
      - 'client/src/app/**/lab/**'
      - 'client/src/components/lab/**'
      - 'tests/e2e/lab-*.spec.js'
      - '.github/workflows/lab-module-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'server/routes/lab.js'
      - 'server/database/lab-*.sql'
      - 'server/utils/lab-*.js'
      - 'server/scripts/load-lab-seed-data.js'
      - 'server/__tests__/lab.test.js'
      - 'client/src/app/**/lab/**'
      - 'client/src/components/lab/**'
      - 'tests/e2e/lab-*.spec.js'

env:
  NODE_VERSION: '18'
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  # ====================================================================
  # JOB 1: LINT Y VALIDACI√ìN DE C√ìDIGO
  # ====================================================================
  lint-lab-module:
    name: 'üîç Lint M√≥dulo Laboratorios'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json
      
      - name: Instalar dependencias del servidor
        run: |
          cd server
          npm ci
      
      - name: Instalar dependencias del cliente
        run: |
          cd client
          npm ci
      
      - name: Lint archivos del m√≥dulo de laboratorios (Backend)
        run: |
          cd server
          npx eslint routes/lab.js utils/lab-*.js --format=github
      
      - name: Lint archivos del m√≥dulo de laboratorios (Frontend)
        run: |
          cd client
          npx eslint src/app/**/lab/** src/components/lab/** --ext .tsx,.ts --format=github

  # ====================================================================
  # JOB 2: TESTS UNITARIOS DEL M√ìDULO
  # ====================================================================
  unit-tests-lab:
    name: 'üß™ Tests Unitarios - Laboratorios'
    runs-on: ubuntu-latest
    needs: lint-lab-module
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'server/package-lock.json'
      
      - name: Instalar dependencias
        run: |
          cd server
          npm ci
      
      - name: Ejecutar tests unitarios del m√≥dulo
        run: |
          cd server
          npm run test:lab
        env:
          NODE_ENV: test
      
      - name: Subir coverage del m√≥dulo
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: lab-module
          name: lab-module-coverage
          fail_ci_if_error: false

  # ====================================================================
  # JOB 3: VALIDACI√ìN DE ESQUEMA DE BASE DE DATOS
  # ====================================================================
  validate-lab-schema:
    name: 'üóÑÔ∏è Validar Esquema BD - Laboratorios'
    runs-on: ubuntu-latest
    needs: lint-lab-module
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: edu21_lab_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'server/package-lock.json'
      
      - name: Instalar dependencias
        run: |
          cd server
          npm ci
      
      - name: Validar esquema de laboratorios
        run: |
          cd server
          # Simular aplicaci√≥n del esquema
          echo "Validando esquema lab-schema.sql..."
          node -e "
            const fs = require('fs');
            const schema = fs.readFileSync('database/lab-schema.sql', 'utf8');
            if (!schema.includes('lab_product') || !schema.includes('lab_activity')) {
              throw new Error('Esquema incompleto');
            }
            console.log('‚úÖ Esquema v√°lido');
          "
      
      - name: Validar datos semilla
        run: |
          cd server
          node -e "
            const seedData = require('./database/lab-seed-data.json');
            if (seedData.products.length !== 10 || seedData.activities.length !== 40) {
              throw new Error('Datos semilla incompletos');
            }
            console.log('‚úÖ Datos semilla v√°lidos');
          "

  # ====================================================================
  # JOB 4: TESTS E2E DEL M√ìDULO
  # ====================================================================
  e2e-tests-lab:
    name: 'üé≠ Tests E2E - Laboratorios'
    runs-on: ubuntu-latest
    needs: [unit-tests-lab, validate-lab-schema]
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json
      
      - name: Instalar dependencias del servidor
        run: |
          cd server
          npm ci
      
      - name: Instalar dependencias del cliente
        run: |
          cd client
          npm ci
      
      - name: Instalar Playwright
        run: npx playwright install --with-deps
      
      - name: Iniciar servidor de desarrollo
        run: |
          cd server
          npm start &
          sleep 10
        env:
          NODE_ENV: development
          PORT: 5000
      
      - name: Iniciar cliente de desarrollo
        run: |
          cd client
          npm run dev &
          sleep 15
        env:
          NODE_ENV: development
          NEXT_PUBLIC_API_URL: http://localhost:5000
      
      - name: Esperar servicios disponibles
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:5000/api/health; do sleep 2; done'
      
      - name: Ejecutar tests E2E del m√≥dulo de laboratorios
        run: npx playwright test tests/e2e/lab-*.spec.js
        env:
          CI: true
      
      - name: Subir artifacts de Playwright
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: lab-playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # ====================================================================
  # JOB 5: BUILD Y VALIDACI√ìN DE INTEGRACI√ìN
  # ====================================================================
  build-integration-test:
    name: 'üèóÔ∏è Build & Test Integraci√≥n'
    runs-on: ubuntu-latest
    needs: [unit-tests-lab, validate-lab-schema]
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json
      
      - name: Instalar dependencias
        run: |
          cd server && npm ci
          cd ../client && npm ci
      
      - name: Build del cliente (validar que el m√≥dulo compila)
        run: |
          cd client
          npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: http://localhost:5000
      
      - name: Verificar rutas del m√≥dulo en build
        run: |
          cd client
          # Verificar que las p√°ginas del m√≥dulo se generaron
          test -d ".next/server/app/teacher/lab" || echo "‚ö†Ô∏è P√°ginas del m√≥dulo no encontradas"
          echo "‚úÖ Build completado con m√≥dulo de laboratorios"
      
      - name: Test de integraci√≥n con plataforma existente
        run: |
          cd server
          # Test que verifica que el m√≥dulo no rompe la plataforma existente
          node -e "
            const express = require('express');
            const labRoutes = require('./routes/lab.js');
            const app = express();
            app.use('/api/lab', labRoutes);
            console.log('‚úÖ M√≥dulo de laboratorios se integra correctamente');
          "

  # ====================================================================
  # JOB 6: SECURITY SCAN ESPEC√çFICO DEL M√ìDULO
  # ====================================================================
  security-scan-lab:
    name: 'üîí Security Scan - Laboratorios'
    runs-on: ubuntu-latest
    needs: lint-lab-module
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Ejecutar audit de NPM en dependencias del m√≥dulo
        run: |
          cd server
          npm audit --audit-level moderate
      
      - name: Scan de c√≥digo con CodeQL (solo archivos del m√≥dulo)
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Ejecutar an√°lisis CodeQL
        uses: github/codeql-action/analyze@v2

  # ====================================================================
  # JOB 7: DEPLOYMENT PREVIEW (SOLO EN PR)
  # ====================================================================
  deploy-preview:
    name: 'üöÄ Deploy Preview'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [e2e-tests-lab, build-integration-test, security-scan-lab]
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Deploy a Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./client
          scope: ${{ secrets.VERCEL_ORG_ID }}
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PREVIEW_API_URL }}

  # ====================================================================
  # JOB 8: PRODUCTION DEPLOYMENT (SOLO EN MAIN)
  # ====================================================================
  deploy-production:
    name: 'üéØ Deploy Producci√≥n'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [e2e-tests-lab, build-integration-test, security-scan-lab]
    environment: production
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Deploy a Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./client
          scope: ${{ secrets.VERCEL_ORG_ID }}
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}
      
      - name: Cargar datos semilla en producci√≥n
        run: |
          cd server
          npm ci
          node scripts/load-lab-seed-data.js
        env:
          NODE_ENV: production
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      
      - name: Notificar deployment exitoso
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üéâ M√≥dulo III - Laboratorios M√≥viles desplegado exitosamente en producci√≥n!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ====================================================================
  # JOB 9: VALIDACI√ìN POST-DEPLOYMENT
  # ====================================================================
  post-deployment-validation:
    name: '‚úÖ Validaci√≥n Post-Deploy'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: deploy-production
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Instalar dependencias de testing
        run: |
          npm install -g @playwright/test
          npx playwright install
      
      - name: Tests de smoke en producci√≥n
        run: |
          npx playwright test tests/e2e/lab-smoke.spec.js
        env:
          BASE_URL: ${{ secrets.PRODUCTION_URL }}
          CI: true
      
      - name: Verificar APIs del m√≥dulo en producci√≥n
        run: |
          curl -f "${{ secrets.PRODUCTION_API_URL }}/api/lab/products" || exit 1
          curl -f "${{ secrets.PRODUCTION_API_URL }}/api/lab/activities" || exit 1
          echo "‚úÖ APIs del m√≥dulo funcionando en producci√≥n"
      
      - name: Notificar si hay problemas
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå Problemas detectados en el M√≥dulo de Laboratorios en producci√≥n'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} 