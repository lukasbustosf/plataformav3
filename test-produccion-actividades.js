const http = require('http');

function makeRequest(url, headers = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const options = {
      hostname: urlObj.hostname,
      port: urlObj.port || (urlObj.protocol === 'https:' ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        ...headers
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        resolve({
          status: res.statusCode,
          data: data
        });
      });
    });

    req.on('error', (err) => {
      reject(err);
    });
    req.end();
  });
}

async function testProduccion() {
  console.log('üöÄ DIAGN√ìSTICO PRODUCCI√ìN ACTIVIDADES LAB');
  console.log('='.repeat(60));
  
  // Simular entorno de producci√≥n
  process.env.NODE_ENV = 'production';
  
  console.log('üîß Configuraci√≥n actual:');
  console.log('- NODE_ENV:', process.env.NODE_ENV);
  console.log('- Modo:', process.env.NODE_ENV === 'production' ? 'PRODUCCI√ìN' : 'DESARROLLO');
  
  const LOCAL_URL = 'http://localhost:5000';
  const PROD_URL = 'https://plataforma-edu21-production.up.railway.app';
  
  console.log('\nüìã PRUEBAS DE PRODUCCI√ìN:');
  console.log('='.repeat(60));
  
  // 1. Probar servidor local en modo producci√≥n
  console.log('\nüîç 1. Probando servidor local en modo producci√≥n...');
  try {
    const response = await makeRequest(`${LOCAL_URL}/api/lab/activities`);
    if (response.status === 401) {
      console.log('‚úÖ Autenticaci√≥n requerida (correcto para producci√≥n)');
    } else if (response.status === 200) {
      console.log('‚ö†Ô∏è Servidor acepta requests sin autenticaci√≥n (problema)');
    } else {
      console.log('‚ùå Error inesperado:', response.status);
    }
  } catch (error) {
    console.log('‚ùå Servidor local no responde');
  }
  
  // 2. Probar tokens demo en producci√≥n (deber√≠an fallar)
  console.log('\nüîç 2. Probando tokens demo en producci√≥n...');
  try {
    const response = await makeRequest(`${LOCAL_URL}/api/lab/activities`, {
      'Authorization': 'Bearer demo-token-teacher-123'
    });
    if (response.status === 401) {
      console.log('‚úÖ Tokens demo rechazados (correcto para producci√≥n)');
    } else if (response.status === 200) {
      console.log('‚ùå Tokens demo funcionan (PROBLEMA: no deber√≠an funcionar en producci√≥n)');
    } else {
      console.log('‚ö†Ô∏è Respuesta inesperada:', response.status);
    }
  } catch (error) {
    console.log('‚ùå Error al probar tokens demo');
  }
  
  // 3. Probar servidor de producci√≥n real
  console.log('\nüîç 3. Probando servidor de producci√≥n real...');
  try {
    const response = await makeRequest(`${PROD_URL}/api/lab/activities`);
    console.log('‚úÖ Servidor de producci√≥n responde:', response.status);
  } catch (error) {
    console.log('‚ùå Servidor de producci√≥n no responde');
  }
  
  // 4. Verificar configuraci√≥n del middleware
  console.log('\nüîç 4. Verificando configuraci√≥n del middleware...');
  console.log('En producci√≥n, el middleware debe:');
  console.log('- Rechazar tokens demo');
  console.log('- Solo aceptar JWT v√°lidos de Supabase');
  console.log('- Requerir autenticaci√≥n real');
  
  // Resumen
  console.log('\nüìã RESUMEN PARA PRODUCCI√ìN:');
  console.log('='.repeat(60));
  
  console.log('‚úÖ CONFIGURACI√ìN CORRECTA PARA PRODUCCI√ìN:');
  console.log('1. NODE_ENV=production');
  console.log('2. Tokens demo deshabilitados');
  console.log('3. Autenticaci√≥n JWT real requerida');
  console.log('4. Usuarios reales en Supabase');
  
  console.log('\n‚ö†Ô∏è PROBLEMAS COMUNES EN PRODUCCI√ìN:');
  console.log('1. Usuarios no pueden loguearse (credenciales demo no funcionan)');
  console.log('2. Error 401 - No autorizado (usuario no logueado)');
  console.log('3. Actividades no se cargan (problema de autenticaci√≥n)');
  console.log('4. CORS errors (dominios no configurados)');
  
  console.log('\nüîß SOLUCIONES PARA PRODUCCI√ìN:');
  console.log('1. Crear usuarios reales en Supabase');
  console.log('2. Configurar autenticaci√≥n real');
  console.log('3. Verificar variables de entorno');
  console.log('4. Configurar CORS para dominios de producci√≥n');
  
  console.log('\nüí° PARA MIGRAR A PRODUCCI√ìN:');
  console.log('1. Cambiar NODE_ENV=production');
  console.log('2. Crear usuarios reales en Supabase');
  console.log('3. Configurar URLs de producci√≥n');
  console.log('4. Probar con usuarios reales');
}

testProduccion().catch(console.error); 